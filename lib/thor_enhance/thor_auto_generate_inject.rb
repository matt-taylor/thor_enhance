# frozen_string_literal: true

####################
#
# Injects a method directly into the thor base class
# This allows the developer to have this convenience method
# Just by utilizing ThorEnhance
#
####################
require "thor"

class Thor
  desc "thor_enhance_autogenerate", "Auto Generate ReadMe material for your Thor commands"
  method_option :subcommand, aliases: "-s", type: :string, repeatable: true, desc: "When provided, autogeneration will execute on the subcommand"
  method_option :command, aliases: "-c", type: :string, desc: "When provided, autogeneration will occur only on this method. Note: When used with subcommand, method must exist on subcommand"
  method_option :basename, aliases: "-b", type: :string, desc: "The name of the file that executes the Thor script"
  method_option :generated_root, aliases: "-r", type: :string, default: File.expand_path("generated_readme"), desc: "The root location to store autogenerated files"
  method_option :apply, aliases: "-a", type: :boolean, desc: "When comfortable with the changes made, enabling apply will save changes to generated files"

  def thor_enhance_autogenerate
    require "thor_enhance/autogenerate"
    basename = options.basename || ThorEnhance.basename || File.basename($0)

    result = ThorEnhance::Autogenerate.execute!(options: options, root: self.class, basename: basename)

    if result[:status] == :pass
      __auto_generate_success!(result[:saved_status])
    else
      __auto_generate_fail!(result[:msg_array])
    end
  end

  no_tasks do
    def __auto_generate_success!(statuses)
      if statuses.all? { _1[:apply] == true }
        say "Readme changes are enabled", [:green, :bold], true
      else
        say "Readme changes are not enabled. To apply changes, add `--apply` to the command", [:on_white, :black], true
      end
      statuses.each do |status|
        case status[:diff]
        when :new
          say "  Added    : #{status[:path]}", [:green, :bold], true
        when :same
          say "  No Change: #{status[:path]}", [:yellow, :bold], true
        when :overwite
          say "  Changes  : #{status[:path]}", [:cyan, :bold], true
        else
          say "           : #{status[:path]}", [:bold], true
        end
      end
    end

    def __auto_generate_fail!(msg_array)
      say_error set_color("*********************** FAILED OPERATION ***********************", :red, :bold)
      say_error set_color("FAIL: Unable to continue", :red, :bold)
      msg_array.each do |line|
        say_error set_color("FAIL: #{line}", :red, :bold)
      end
      say_error set_color("*********************** FAILED OPERATION ***********************", :red, :bold)
      exit 1
    end
  end
end
